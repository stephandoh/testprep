35%

// create an azure machine learning workspace

from azureml.core import workspacews =  Workspace.create(
    name = "aml-workspace",
    subscription_id = ,
    resource_group = 'aml-resources',
    create_resource_group = True,
    location = 'eastus',
    sku = 'enterprise
)

// Workspace Configuration

{
    "subcription_id" = "<subscription-id>",
    "resource_group" = "<resource-group>",
    "workspace_name" = "<workspace-name>"
}

// connect to workpace using configuration file

from azureml.core import Workspace
ws = Workspace.from_config()

// load workspace without configuration file

from azureml.core import Workspace
ws = Worksspace.get(
    name = "aml-workspace",
    subscription_id = "123456-abc-123...",
    resource_group = "aml-resouces"
)

// Registore a datastore
from azureml.core import Workspacem datastore
ws = Workspace.from_config()

blob_ds = Datastore.register_azure_blob_container(
    workspace=ws,
    datastore_name='blob_data',
    container_name='data_container',
    account_name='az_store_acct',
    account_key='<account-key>'
    )

// create and register a tabular dataset 
from azureml.core import Dataset
blob_ds = ws.get_default_datastore()
csv_paths = [(blob_ds, 'data/files/current_data.csv'),(blob_ds, data/files/archive/*.csv')]
tab_ds = Dataset.Tabular.from_delimited_files(path = csv_paths)
tab_ds = tab_ds.register(workspace= ws, name = 'csv_table')

// create and register a file dataset
blob_ds= ws.get_default datasore()
file_ds = Dataset.File.from_files(path = (data/files/images/*.jpg))
file_ds = file.ds.register(workspace = ws, name='img_files')

//create a compute instance 
from azureml.core.compute import ComputeInstance, ComputeTarget
from azureml.core.compute_target import ComputeTargetException
compute_name = 'compute-instance'
try:
    instance = Compute_Instance(workspace=ws, name= compute_name)

Except ComputeTargetException:
    compute_config = ComputeInstance.provisioning_configuration(
        vm_size = 'STANDARD_D3_V2',
        ssh_public_access= False
    )
    instance = ComputeInstance.create(ws, name, compute_config)
    instance.wait_for_completion(show_output=True)